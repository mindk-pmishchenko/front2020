{"ast":null,"code":"import React from 'react';\nvar defaultContext = /*#__PURE__*/React.createContext(undefined); // We share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext() {\n  // @ts-ignore (for global)\n  if (typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nexport var useQueryClient = function useQueryClient() {\n  var queryClient = React.useContext(getQueryClientContext());\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nexport var QueryClientProvider = function QueryClientProvider(_ref) {\n  var client = _ref.client,\n      children = _ref.children;\n  React.useEffect(function () {\n    client.mount();\n    return function () {\n      client.unmount();\n    };\n  }, [client]);\n  var Context = getQueryClientContext();\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children);\n};","map":{"version":3,"sources":["/Users/pavelmishchenko/WebstormProjects/front2020/node_modules/react-query/es/react/QueryClientProvider.js"],"names":["React","defaultContext","createContext","undefined","getQueryClientContext","window","ReactQueryClientContext","useQueryClient","queryClient","useContext","Error","QueryClientProvider","_ref","client","children","useEffect","mount","unmount","Context","createElement","Provider","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAIC,cAAc,GAAG,aAAaD,KAAK,CAACE,aAAN,CAAoBC,SAApB,CAAlC,C,CAAkE;AAClE;AACA;AACA;AACA;AACA;;AAEA,SAASC,qBAAT,GAAiC;AAC/B;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAI,CAACA,MAAM,CAACC,uBAAZ,EAAqC;AACnCD,MAAAA,MAAM,CAACC,uBAAP,GAAiCL,cAAjC;AACD;;AAED,WAAOI,MAAM,CAACC,uBAAd;AACD;;AAED,SAAOL,cAAP;AACD;;AAED,OAAO,IAAIM,cAAc,GAAG,SAASA,cAAT,GAA0B;AACpD,MAAIC,WAAW,GAAGR,KAAK,CAACS,UAAN,CAAiBL,qBAAqB,EAAtC,CAAlB;;AAEA,MAAI,CAACI,WAAL,EAAkB;AAChB,UAAM,IAAIE,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,SAAOF,WAAP;AACD,CARM;AASP,OAAO,IAAIG,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AAClE,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACE,QADpB;AAEAd,EAAAA,KAAK,CAACe,SAAN,CAAgB,YAAY;AAC1BF,IAAAA,MAAM,CAACG,KAAP;AACA,WAAO,YAAY;AACjBH,MAAAA,MAAM,CAACI,OAAP;AACD,KAFD;AAGD,GALD,EAKG,CAACJ,MAAD,CALH;AAMA,MAAIK,OAAO,GAAGd,qBAAqB,EAAnC;AACA,SAAO,aAAaJ,KAAK,CAACmB,aAAN,CAAoBD,OAAO,CAACE,QAA5B,EAAsC;AACxDC,IAAAA,KAAK,EAAER;AADiD,GAAtC,EAEjBC,QAFiB,CAApB;AAGD,CAbM","sourcesContent":["import React from 'react';\nvar defaultContext = /*#__PURE__*/React.createContext(undefined); // We share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext() {\n  // @ts-ignore (for global)\n  if (typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nexport var useQueryClient = function useQueryClient() {\n  var queryClient = React.useContext(getQueryClientContext());\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nexport var QueryClientProvider = function QueryClientProvider(_ref) {\n  var client = _ref.client,\n      children = _ref.children;\n  React.useEffect(function () {\n    client.mount();\n    return function () {\n      client.unmount();\n    };\n  }, [client]);\n  var Context = getQueryClientContext();\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children);\n};"]},"metadata":{},"sourceType":"module"}